@layout('layout/html')

@set('title', '~')

@section('body')
<div class="container">
    {{--  <h1 class="display-1 align-middle">WHOOSH</h1>  --}}

    <canvas id="canvas" touch-action="none" style="background: white; position: absolute; top: 0; left: 0;">
        Opps, you cannot play draw N guess with this browser!
    </canvas>
</div>

<script>
    const currentUrl = new URL(window.location);

    const webSocketHost = currentUrl.host;
    const webSocketProtocol = currentUrl.protocol === 'https:' ? 'wss' : 'ws';
    const webSocketUrl = `${webSocketProtocol}://${webSocketHost}/api/events`;

    const socket = new ReconnectingWebSocket(webSocketUrl);

    const canvas = document.getElementById('canvas');
    const canvasContext = canvas.getContext('2d');

    let mouseLastDown = null;
    let mouseNeedsRender = false;
    const mousePoints = [];
    let mousePointGroups = {}; // for debug mainly

    function easeInOutCirc(x) {
        return x < 0.5
            ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2
            : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
    }

    function pushEventPoint(point) {
        // mousePoints.push(point);
        socket.send(JSON.stringify({ event: 'point', data: point }));
    }

    function handlePointerDown(event) {
        mouseLastDown = Date.now();

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);
    }

    function handlePointerUp(e) {
        mouseLastDown = null;

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);
    }

    function handlePointerMove(e) {
        if (!mouseLastDown) return;

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);
    }

    function extractPointerEventPoint(event) {
        const elementRect = event.target.getBoundingClientRect();

        const relativeX = event.clientX - elementRect.left;
        const relativeY = event.clientY - elementRect.top;

        return {
            t: event.pointerType,
            x: relativeX / event.target.width,
            y: relativeY / event.target.height,
            p: event.pressure,
        };
    }

    function draw() {
        const currentTimestamp = Date.now();

        canvasContext.clearRect(0, 0, canvas.width, canvas.height);

        const pointGroups = mousePoints.reduce((groups, point) => {
            if (!groups[point.c]) groups[point.c]= [];

            groups[point.c].push(point);

            return groups;
        }, {});

        mousePointGroups = pointGroups;

        for (const groupKey in pointGroups) {
            if (!pointGroups[groupKey]) continue;

            const groupPoints = pointGroups[groupKey];

            for (let pointIndex = 0; pointIndex < groupPoints.length; pointIndex++) {
                const point = groupPoints[pointIndex];

                const pointLifetime = currentTimestamp - point.d;
                const pointTtl = Math.min(pointLifetime / 3000, 1);
                const pointOpacity = easeInOutCirc(1 - pointTtl);

                canvasContext.fillStyle = `rgba(0,0,0,${pointOpacity})`;
                canvasContext.lineWidth = 5;

                if (point.t === 'mouse') canvasContext.strokeStyle = `rgba(0,0,0,${pointOpacity})`;
                if (point.t === 'pen') canvasContext.strokeStyle = `rgba(128,0,128,${pointOpacity})`; // purple
                if (point.t === 'touch') canvasContext.strokeStyle = `rgba(255,0,0,${pointOpacity})`; // red

                const previousPoint = groupPoints[pointIndex - 1];

                if (previousPoint && previousPoint.p) {
                    // canvasContext.strokeStyle = `rgba(0,0,0,${pointOpacity})`;

                    canvasContext.beginPath(); // Start a new path
                    canvasContext.moveTo(previousPoint.x * canvas.width, previousPoint.y * canvas.height); // Move the pen to (30, 50)
                    canvasContext.lineTo(point.x * canvas.width, point.y * canvas.height); // Draw a line to (150, 100)
                    canvasContext.stroke(); // Render the path
                }
            }
        }
    }

    function startRender(drawFunction) {
        drawFunction();

        window.requestAnimationFrame(() => startRender(drawFunction));
    }

    function handleWindowResize() {
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;

        draw(); // forces draw to avoid white flash
    }

    // La connexion est ouverte
    socket.addEventListener('open', function (event) {
        socket.send('Coucou le serveur !');
    });

    // Ã‰couter les messages
    socket.addEventListener('message', function (message) {
        const messageData = JSON.parse(message.data);

        if (messageData.event === 'point') {
            mousePoints.push(messageData.data);
            console.debug('POING', messageData);
        }
    });

    canvas.addEventListener('pointerup', handlePointerUp, false);
    canvas.addEventListener('pointerdown', handlePointerDown, false);
    canvas.addEventListener('pointermove', handlePointerMove, false);

    window.onresize = handleWindowResize;

    handleWindowResize();
    startRender(draw);

</script>
@end