@layout('layout/html')

@set('title', '~')

@section('body')
<div class="container">
    {{--  <h1 class="display-1 align-middle">WHOOSH</h1>  --}}

    <canvas id="canvas" touch-action="none" width="640" height="640" style="background: white;">
        Opps, you cannot play draw N guess with this browser!
    </canvas>
</div>

<script>
    const currentUrl = new URL(window.location);

    const webSocketHost = currentUrl.host;
    const webSocketProtocol = currentUrl.protocol === 'https' ? 'wss' : 'ws';
    const webSocketUrl = `${webSocketProtocol}://${webSocketHost}/api/events`;

    const socket = new ReconnectingWebSocket(webSocketUrl);

    let windowHeight = window.innerHeight;
    let windowWidth = window.innerWidth;

    const canvas = document.getElementById('canvas');
    const canvasContext = canvas.getContext('2d');

    // canvas.height = window.innerHeight;
    // canvas.width = window.innerWidth;

    let mouseDown = false;
    let mouseNeedsRender = false;
    const mousePoints = [];

function easeInOutCirc(x) {
return x < 0.5
  ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2
  : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;

}
    function pushEventPoint(point) {
        // mousePoints.push(point);
        socket.send(JSON.stringify({ event: 'point', data: point }));
    }

    function handlePointerDown(event) {
        mouseDown = true;

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);
    }

    function handlePointerUp(e) {
        mouseDown = false;

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);
    }

    function handlePointerMove(e) {
        if (!mouseDown) return;

        const eventPoint = extractPointerEventPoint(event);
        pushEventPoint(eventPoint);

        // console.log(eventPoint);
    }

    function extractPointerEventPoint(event) {
        // socket.send(JSON.stringify({ event: 'log', data: event }));
        const elementRect = event.target.getBoundingClientRect();

        const relativeX = event.clientX - elementRect.left;
        const relativeY = event.clientY - elementRect.top;

        return {
            t: event.pointerType,
            x: relativeX / event.target.width,
            y: relativeY / event.target.height,
            p: event.pressure,
        };
    }

    function draw() {

        const currentTimestamp = Date.now();

        canvasContext.clearRect(0, 0, canvas.width, canvas.height);

        for (let pointIndex = 0; pointIndex < mousePoints.length; pointIndex++) {
            const point = mousePoints[pointIndex];

            // if (point.t === 'mouse') canvasContext.fillStyle = 'black';
            // if (point.t === 'pen') canvasContext.fillStyle = 'purple';
            // if (point.t === 'touch') canvasContext.fillStyle = 'red';

            const pointLifetime = currentTimestamp - point.d;
            const pointTtl = Math.min(pointLifetime / 3000, 1);
            const pointOpacity = easeInOutCirc(1 - pointTtl);

            canvasContext.fillStyle = `rgba(0,0,0,${pointOpacity})`;

            // canvasContext.fillRect(
            //     point.x * canvas.width,
            //     point.y * canvas.height,
            //     10 * point.p + 2,
            //     10 * point.p + 2,
            // );

            const previousPoint = mousePoints[pointIndex - 1];

            if (previousPoint) {
                canvasContext.lineWidth = 5;
                canvasContext.strokeStyle = `rgba(0,0,0,${pointOpacity})`;

                canvasContext.beginPath(); // Start a new path
                canvasContext.moveTo(previousPoint.x * canvas.height, previousPoint.y * canvas.width); // Move the pen to (30, 50)
                canvasContext.lineTo(point.x * canvas.height, point.y * canvas.width); // Draw a line to (150, 100)
                canvasContext.stroke(); // Render the path
            }
        }

    }

    function startRender(drawFunction) {
        drawFunction();

        window.requestAnimationFrame(() => startRender(drawFunction));
    }

    function handleWindowResize() {
        // canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;

        draw(); // forces draw to avoid white flash
    }

        // La connexion est ouverte
    socket.addEventListener('open', function (event) {
        socket.send('Coucou le serveur !');
    });

    // Ã‰couter les messages
    socket.addEventListener('message', function (message) {
        const messageData = JSON.parse(message.data);
        if (messageData.event === 'point') {
            mousePoints.push(messageData.data);
            console.log('POING', message.data);
        }
    });


    canvas.addEventListener('pointerup', handlePointerUp, false);
    canvas.addEventListener('pointerdown', handlePointerDown, false);
    canvas.addEventListener('pointermove', handlePointerMove, false);

    window.onresize = handleWindowResize;

    startRender(draw);

    // data thingy

</script>
@end